<?xml version="1.0" encoding="utf-8"?>
<project name="rabnet" default="full_build" basedir=".">
	<description>rabnet project makefile</description>
	<!-- properties defines ! -->
	<property name="appname" value="Миакро-9.11" />
	<property name="companyname" value="9-Бит" />
	<property name="appname_en" value="Miakro-9.11" />
	<property name="companyname_en" value="9-Bits" />
	<property name="revision" value="none" />
	<property name="bindir" value="./_bin" />
	<property name="allineed.path" value="./allineed" />
	<property name="party3d.path" value="./party3d" />
	<property name="srcdir" value="./src" overwrite="false" />
	<property name="helpdir" value="./help" />
	<property name="bindir.plugins" value="${bindir}/PlugIns" />
	<!--if test="${not property::exists('host_spec_path')}">
		<property name="host_spec_path" value="../.." if="${file::exists('../../host_spec.include')}" />
		<property name="host_spec_path" value=".." if="${file::exists('../host_spec.include')}" />
		<property name="host_spec_path" value="." if="${file::exists('./host_spec.include')}" />
	</if>
	<include buildfile="${host_spec_path}/host_spec.include" /-->
	<include buildfile="./host_spec.include" />
	<!--include buildfile="./nant_include/guardant.inc.build" /-->
	<include buildfile="./nant_include/compilation.inc.build" />
	<include buildfile="./nant_include/firmuper.inc.build" />
	<!--if test="${path::get-file-name(project::get-base-directory())!='trunk'}">
		<property name="build.version" value="${path::get-file-name(directory::get-parent-directory(project::get-base-directory()))}" unless="${property::exists('build.version')}" />
		<echo message="Build version base from directory name: ${build.version}" />
	</if-->
	<property name="log4net.lib" value="log4net.dll" />
	<property name="log4net.ass" value="${party3d.path}/${log4net.lib}" />
	<property name="sb.lib" value="SplitButton.dll" />
	<property name="sb.ass" value="${party3d.path}/${sb.lib}" />
	<property name="mysql.lib" value="MySql.Data.dll" />
	<property name="mysql.ass" value="${party3d.path}/${mysql.lib}" />
	<property name="rep.lib" value="RdlViewer.dll" />
	<property name="rep.ass" value="${party3d.path}/${rep.lib}" />
	<property name="repeng.lib" value="RdlEngine.dll" />
	<property name="repeng.ass" value="${party3d.path}/${repeng.lib}" />
	<property name="nant_contrib" value="${allineed.path}/NAnt/NAnt.Contrib.Tasks.dll" />
	<property name="compile_flag" value="" />
	<property name="dotnetInstaller" value="dotnetfx.exe" />
	<property name="mysqlInstaller" value="mysql-essential-5.1.49-win32.msi" />
	<property name="MSIInstaller" value="WindowsXP-KB942288-v3-x86.exe" />
	<property name="dotnetInstallerSource" value="${party3d.path}/${dotnetInstaller}" />
	<property name="mysqlInstallerSource" value="${party3d.path}/${mysqlInstaller}" />
	<property name="MSIInstallerSource" value="${party3d.path}/${MSIInstaller}" />
	<property name="Bin7zSource" value="${party3d.path}/7z" />
	<property name="installersPath" value="" />
	<property name="slash" value="" />
	<property name="dotnetInstallerDest" value="${installersPath}${slash}${dotnetInstaller}" />
	<property name="mysqlInstallerDest" value="${installersPath}${slash}${mysqlInstaller}" />
	<property name="MSIInstallerDest" value="${installersPath}${slash}${MSIInstaller}" />
	<property name="NSIS" value="${NSISPath}\makensis.exe" />	
	<property name="nant.settings.currentframework" value="net-3.5" />
	<property name="help_setup" value="Руководство по установке программы Miakro 9.11.docx" />
	<property name="help_rcdb" value="Создание Резервных Копий Базы Данных.docx" />
	<property name="help_gtru" value="Руководство по обновлению Ключей Защиты.docx" />
	
	<!-- TARGETS ! -->
	
	<target name="build" depends="clear,buildall" description="Full build" />
	
	<target name="buildall" depends="make_tmp_dir,git_info, release, protected,demo" description="Build all projects">
		<!--delete dir="${tmpdir}"/-->
	</target>
	
	<target name="make_tmp_dir">
		<property name="tmpdir" value="./_tmp" />
		<delete dir="${tmpdir}" />
		<mkdir dir="${tmpdir}" />
	</target>
	
	<target name="clear" description="Clear build directories">
		<delete dir="${bindir}" />
	</target>
	
	<target name="prepare_bin_dir">
		<mkdir dir="${bindir}" />
		<delete dir="${bin_dir}" />
		<mkdir dir="${bin_dir}" />
		<mkdir dir="${bin_dir}/7z" />
		<!--mkdir dir="${bin_dir}/Guardant" /-->
		<mkdir dir="${bin_dir}/bin" />
		
		<property name="bin_dir_bin" value="${bin_dir}/bin" />
		<property name="log4net.use" value="${bin_dir_bin}/${log4net.lib}" />
		<property name="sb.use" value="${bin_dir_bin}/${sb.lib}" />
		<property name="mysql.use" value="${bin_dir_bin}/${mysql.lib}" />
		<property name="rep.use" value="${bin_dir_bin}/${rep.lib}" />
		<property name="repeng.use" value="${bin_dir_bin}/${repeng.lib}" />
		
		<copy file="${log4net.ass}" tofile="${log4net.use}" />
		<copy file="${sb.ass}" tofile="${sb.use}" />
		<copy file="${mysql.ass}" tofile="${mysql.use}" />
		<copy file="${rep.ass}" tofile="${rep.use}" />
		<copy file="${repeng.ass}" tofile="${repeng.use}" />
		<call target="include_grd_libs" />
		<call target="include_grd_tools" />
		<copy todir="${bin_dir_bin}/reports">
			<fileset basedir="${srcdir}/rabnet/gui/reports">
				<include name="*.rdl" />
			</fileset>
		</copy>
		<copy todir="${bin_dir_bin}">
			<fileset basedir="${helpdir}/rabnet_help">
				<include name="*.chm" />
			</fileset>
		</copy>
		<copy todir="${bin_dir}/7z">
			<fileset basedir="${Bin7zSource}">
				<include name="*.*" />
			</fileset>
		</copy>
	</target>
	
	<target name="prepare_bin_dir_demo">
		<mkdir dir="${bindir}" />
		<delete dir="${bin_dir}" />
		<mkdir dir="${bin_dir}" />
		<mkdir dir="${bin_dir}/bin" />
		<!-- mkdir dir="${bin_dir}/Tools"/>
		<mkdir dir="${bin_dir}/RabNet"/ -->
		<property name="bin_dir_bin" value="${bin_dir}/bin" />
		<property name="log4net.use" value="${bin_dir_bin}/${log4net.lib}" />
		<property name="sb.use" value="${bin_dir_bin}/${sb.lib}" />
		<property name="mysql.use" value="${bin_dir_bin}/${mysql.lib}" />
		<property name="rep.use" value="${bin_dir_bin}/${rep.lib}" />
		<property name="repeng.use" value="${bin_dir_bin}/${repeng.lib}" />
		
		<copy file="${log4net.ass}" tofile="${log4net.use}" />
		<copy file="${sb.ass}" tofile="${sb.use}" />
		<copy file="${mysql.ass}" tofile="${mysql.use}" />
		<copy file="${rep.ass}" tofile="${rep.use}" />
		<copy file="${repeng.ass}" tofile="${repeng.use}" />
		<copy todir="${bin_dir_bin}/reports">
			<fileset basedir="${srcdir}/rabnet/gui/reports">
				<include name="*.rdl" />
			</fileset>
		</copy>
		<copy todir="${bin_dir_bin}">
			<fileset basedir="${helpdir}/rabnet_help">
				<include name="*.chm" />
			</fileset>
		</copy>
	</target>
	
	<target name="release" description="Build RELEASE">
		<property name="compile_flag" value="RELEASE" />
		<property name="bin_dir" value="${bindir}/release" />
		<call target="prepare_bin_dir" />
		<call target="compile" />
	</target>
	
	<target name="protected" description="Build PROTECTED">
		<property name="compile_flag" value="PROTECTED" />
		<property name="bin_dir" value="${bindir}/protected" />
		<call target="prepare_bin_dir" />
		<call target="compile" />
	</target>
	
	<target name="demo" description="Build DEMO">
		<property name="compile_flag" value="DEMO" />
		<property name="bin_dir" value="${bindir}/demo" />
		<call target="prepare_bin_dir_demo" />
		<call target="compile_demo" />
	</target>
	
	<target name="compile" depends="miaconv,updater,rabnet,rabdump,plugins,firmuper" />
	
	<target name="compile_demo" depends="miaconv,updater,rabnet_demo">
		<!--xmlpoke file="${bindir}/demo/RabNet/rabnet.exe.config" xpath="/configuration/log4net/root/level/@value" value="ERROR" /-->
	</target>
	
	<!-- target name="rabnet" description="make rabnet application" depends="db.mysql,engine,gui"/ -->
	<target name="rabnet" description="make rabnet application" depends="db.Interface,db.mysql,engine,pickers,gui_genetics,gui" />
	
	<target name="rabnet_demo" description="make rabnet application" depends="db.Interface,db.mysql,engine,pickers,gui" />
	
	<target name="pickers" description="pickers library for rabnet">
		<csc target="library" output="${bin_dir_bin}/Pickers.dll" define="${compile_flag}" optimize="true">
			<sources>
				<include name="${srcdir}/libs/pickers/*.cs" />
				<include name="${srcdir}/libs/pickers/ComboBoxAppearance/*.cs" />
				<include name="${srcdir}/libs/pickers/Properties/*.cs" />
			</sources>
		</csc>
	</target>
	
	<target name="distrib_nsis" depends="protect">
		<!-- собираем защищенную версию -->
		<property name="dist_type" value="rabnet_protected" />
		<property name="bin_dir" value="${bindir}\protected" />
		<property name="bin_type" value="protected" />
		<property name="setup_suff" value="" />
		<call target="nsis_bld" />
		<copy file="${helpdir}/${help_rcdb}" tofile="${bindir}/miakro_911_${bin_type}/${help_rcdb}" />
		<copy file="${helpdir}/${help_gtru}" tofile="${bindir}/miakro_911_${bin_type}/${help_gtru}" />
		<!-- собираем демо-версию -->
		<property name="dist_type" value="rabnet_protected" />
		<property name="bin_dir" value="${bindir}\demo" />
		<property name="bin_type" value="demo" />
		<property name="build_no_up" value="1" />
		<property name="setup_suff" value="_demo" />
		<call target="nsis_bld" />
		<!-- удаляем временные файлы -->
		<delete file="./distrib/distrib_nsis/setup_bld.nsi" />
		<delete file="./distrib/distrib_nsis/setup.exe" />
		<delete file="./distrib/distrib_nsis/include/LangStrings.nsh" />
	</target>
	
	<target name="nsis_bld">
		<mkdir dir="${bindir}" />
		<delete dir="${bindir}/miakro_911_${bin_type}" />
		<mkdir dir="${bindir}/miakro_911_${bin_type}" />
		<if test="${not property::exists('build_no_up')}">
			<delete dir="${bindir}/miakro_911_${bin_type}_up" />
			<mkdir dir="${bindir}/miakro_911_${bin_type}_up" />
		</if>
		<mkdir dir="${bindir}/miakro_911_${bin_type}/dotnetfx20" />
		<mkdir dir="${bindir}/miakro_911_${bin_type}/mysql" />
		<copy file="${dotnetInstallerSource}" tofile="${bindir}/miakro_911_${bin_type}/dotnetfx20/${dotnetInstallerDest}" />
		<copy file="${mysqlInstallerSource}" tofile="${bindir}/miakro_911_${bin_type}/mysql/${mysqlInstallerDest}" />
		<copy file="${helpdir}/${help_setup}" tofile="${bindir}/miakro_911_${bin_type}/${help_setup}" />
		<delete file="./distrib/distrib_nsis/setup_bld.nsi" />
		<delete file="./distrib/distrib_nsis/setup.exe" />
		<copy file="./distrib/distrib_nsis/setup_${bin_type}_tmpl.nsi" tofile="./distrib/distrib_nsis/setup_bld.nsi" overwrite="true">
			<filterchain>
				<replacetokens>
					<token key="bin_type" value="${bin_type}" />
				</replacetokens>
				<!--tabstospaces /-->
			</filterchain>
		</copy>		
		<copy file="./distrib/distrib_nsis/include/LangStrings.nsh.tmp" tofile="./distrib/distrib_nsis/include/LangStrings.nsh" overwrite="true">
			<filterchain>
				<replacetokens>
					<token key="AppVer" value="${string::replace(shortver,'-','.')}" />
					<token key="AppName" value="${appname}" />
					<token key="AppName_en" value="${appname_en}" />
					<token key="CompanyName" value="${companyname}" />
					<token key="CompanyName_en" value="${companyname_en}" />
					<token key="Copys" value="(C) ${companyname} 2010" />
					<token key="Copys_en" value="(C) ${companyname_en} 2010" />
					<token key="FileDescr" value="Программа установки ${appname} ${fullver}" />
					<token key="FileDescr_en" value="${appname_en} ${fullver} Installer" />
				</replacetokens>
				<!--tabstospaces /-->
			</filterchain>
		</copy>
		<exec program="${NSIS}">
			<arg value="/V3" />
			<arg value="./distrib/distrib_nsis/setup_bld.nsi" />
		</exec>
		<copy file="./distrib/distrib_nsis/setup.exe" tofile="${bindir}/miakro_911_${bin_type}/setup${setup_suff}.exe" />
		<if test="${not property::exists('build_no_up')}">
			<copy file="./distrib/distrib_nsis/setup${setup_suff}.exe" tofile="${bindir}/miakro_911_${bin_type}_up/setup.${fullver}.exe" />
			<copy file="./distrib/distrib_nsis/updates.xml" tofile="${bindir}/miakro_911_${bin_type}_up/updates.xml" />
			<loadtasks assembly="${nant_contrib}" />
			<checksum algorithm="MD5">
				<fileset>
					<include name="${bindir}/miakro_911_${bin_type}_up/setup.${fullver}.exe" />
				</fileset>
			</checksum>
			<loadfile file="${bindir}/miakro_911_${bin_type}_up/setup.${fullver}.exe.MD5" property="distr.md5" />
			<delete file="${bindir}/miakro_911_${bin_type}_up/setup.${fullver}.exe.MD5" />
			<xmlpoke file="${bindir}/miakro_911_${bin_type}_up/updates.xml" xpath="/update/bundle/file[@name = 'setup.exe']/@md5" value="${distr.md5}" />
			<xmlpoke file="${bindir}/miakro_911_${bin_type}_up/updates.xml" xpath="/update/bundle/file[@name = 'setup.exe']/@uri" value="http://update.rabbit-soft.ru/rab/setup.${fullver}.exe" />
			<xmlpoke file="${bindir}/miakro_911_${bin_type}_up/updates.xml" xpath="/update/bundle/version/@number" value="${fullver}" />
		</if>
	</target>
	
	<target name="git_info" description="get git commit info">
		<exec program="git" output="${tmpdir}/rev.txt" failonerror="true">
			<arg value="describe"/>
			<arg value="--tags"/>
			<arg value="--always"/>
			<arg value="--match"/>
			<arg value="v*"/>
			<arg value="HEAD"/>
		</exec>
		<loadfile file="${tmpdir}/rev.txt" property="gt_revision" />
		<exec program="git" output="${tmpdir}/rev_dt.txt" failonerror="true">
			<arg value="log"/>
			<arg value="-1"/>
			<arg value="--format=%ci"/>
		</exec>
		<loadfile file="${tmpdir}/rev_dt.txt" property="gt_date" />

		<echo message="Using GIT revision number: ${gt_revision}" />
		<property name="fullver" value="${string::replace(string::trim(gt_revision),'v','')}" />
		<property name="shortver" value="${string::replace(string::trim(gt_revision),'v','')}" />
		<regex pattern="^(?'shortver'.*)-\w*" input="${shortver}" options="Singleline" failonerror="false" />
		<echo message="Build version: ${fullver}" />
		<echo message="Build short version: ${shortver}" />

		<property name="build_dt" value="${string::trim(gt_date)}" />
		<echo message="Build date: ${build_dt}" />

		<asminfo output="${tmpdir}/VersionInfo.cs" language="CSharp">
			<imports>
				<import namespace="System.Reflection" />
			</imports>
			<attributes>
				<attribute type="AssemblyFileVersionAttribute" value="${string::replace(shortver,'-','.')}" />
				<attribute type="AssemblyVersionAttribute" value="${string::replace(shortver,'-','.')}" />
			</attributes>
		</asminfo>

		<echo file="${tmpdir}/MainForm.BuildDate.cs">
using System;			
namespace rabnet.forms
{
	public partial class MainForm
	{
		public readonly static DateTime BuildDate = DateTime.Parse("${build_dt}");
	}
}
		</echo>
		<echo file="version.txt" message="${fullver}"/>

	</target>
	
	<target name="full_build" depends="clean_mark distrib_nsis">
		<if test="${property::exists('build.automated')}">
			<echo message="${datetime::now()}" file="build.ok" />
		</if>
	</target>
	
	<target name="clean_mark">
		<delete file="build.ok" />
	</target>
	
</project>
